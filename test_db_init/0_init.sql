CREATE TABLE IF NOT EXISTS Users
(
    /* This will be the id generated by the external identity provider (e.g. firebase) */
    id TEXT PRIMARY KEY NOT NULL,
    /* Username and avatar can be null. Defaults will be used. User must only add these when adding friends. */
    username TEXT,
    avatarUrl TEXT,
    invitedBy TEXT REFERENCES Users(id) NOT NULL
);

CREATE TABLE IF NOT EXISTS Friends
(
    friender TEXT REFERENCES Users(id) ON DELETE CASCADE NOT NULL,
    friendee TEXT REFERENCES Users(id) ON DELETE CASCADE NOT NULL
);
CREATE INDEX Friends_Friender on Friends(friender);

CREATE TABLE IF NOT EXISTS Invites (
    id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
    nonce BIGINT NOT NULL,
    inviter TEXT REFERENCES Users(id) ON DELETE CASCADE NOT NULL,
    invitee TEXT REFERENCES Users(id) ON DELETE CASCADE NOT NULL,
    created timestamptz NOT NULL DEFAULT now(),
    duration INTERVAL NOT NULL
);
CREATE INDEX Invites_inviter on Invites(inviter);
CREATE INDEX Invites_invitee on Invites(invitee);
CREATE INDEX Invites_nonce on Invites(nonce);

CREATE TABLE IF NOT EXISTS Tags
(
    id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
    tag TEXT NOT NULL
);
CREATE INDEX Tags_tag on Tags(tag);

CREATE TABLE IF NOT EXISTS Boards
(
    id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
    /* Textual id of the board, e.g. "main", "anime", "memes". Used as part of the url. */
    stringId TEXT NOT NULL,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    /* If avatar is null, board will use default avatar. */
    avatarUrl TEXT,
    settings JSONB NOT NULL
);
CREATE INDEX Boards_stringId on Boards(stringId);

CREATE TABLE IF NOT EXISTS BoardsTags
(
    boardId BIGINT REFERENCES Boards(id) ON DELETE CASCADE NOT NULL,
    tagId BIGINT REFERENCES Tags(id) ON DELETE CASCADE NOT NULL
);

CREATE TABLE IF NOT EXISTS BoardsWatchers (
    boardId BIGINT REFERENCES Boards(id) ON DELETE CASCADE NOT NULL,
    userId TEXT REFERENCES Users(id) ON DELETE CASCADE NOT NULL,
    lastAccess timestamptz NOT NULL DEFAULT now(),
    shouldNotify BOOLEAN NOT NULL DEFAULT FALSE
);
CREATE INDEX BoardsWatchers_board on BoardsWatchers(boardId);
CREATE INDEX BoardsWatchers_userId on BoardsWatchers(userId);

CREATE TABLE IF NOT EXISTS SecretIdentities 
(
    id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
    displayText TEXT NOT NULL,
    /* This can be null if generated on the fly*/
    avatarUrl TEXT
);

CREATE TABLE IF NOT EXISTS Threads
(
    id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
    parentBoard BIGINT REFERENCES Boards(id) ON DELETE CASCADE NOT NULL,
    title TEXT NOT NULL
    /* TODO: decide what to do with threads with deleted posts */
);

CREATE TABLE IF NOT EXISTS ThreadsIdentities
(
    threadId BIGINT REFERENCES Threads(id) NOT NULL,
    userId TEXT REFERENCES Users(id) ON DELETE CASCADE NOT NULL,
    identityId BIGINT REFERENCES SecretIdentities(id) ON DELETE CASCADE NOT NULL
);
CREATE INDEX ThreadsIdentities_threadId on ThreadsIdentities(threadId);

CREATE TABLE IF NOT EXISTS ThreadsWatchers (
    threadId BIGINT REFERENCES Threads(id) ON DELETE CASCADE NOT NULL,
    userId TEXT REFERENCES Users(id) ON DELETE CASCADE NOT NULL,
    lastAccess timestamptz NOT NULL DEFAULT now(),
    shouldNotify BOOLEAN NOT NULL DEFAULT FALSE
);
CREATE INDEX ThreadsWatchers_threadId on ThreadsWatchers(threadId);
CREATE INDEX ThreadsWatchers_userId on ThreadsWatchers(userId);

CREATE TYPE AnonimityType AS ENUM ('everyone', 'strangers');
CREATE TYPE PostType AS ENUM ('text');

CREATE TABLE IF NOT EXISTS Posts (
    id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
    stringId TEXT NOT NULL,
    parentThread BIGINT REFERENCES Threads(id) ON DELETE CASCADE NOT NULL,
    author TEXT REFERENCES Users(id) ON DELETE CASCADE NOT NULL,
    /* UTC timezone. */
    created timestamptz NOT NULL DEFAULT now(),
    content JSONB NOT NULL,
    type PostType NOT NULL,
    whispertags TEXT[],
    /* Mark deleted rather than actually delete for moderation purposes. */
    isDeleted BOOLEAN DEFAULT false,
    anonimityType AnonimityType NOT NULL
);
CREATE INDEX Posts_stringId on Posts(stringId);
CREATE INDEX Posts_parentThread on Posts(parentThread);
CREATE INDEX Posts_author on Posts(author);

CREATE TABLE IF NOT EXISTS PostsTags (
    postId BIGINT REFERENCES Posts(id) ON DELETE CASCADE NOT NULL,
    tagId BIGINT REFERENCES Tags(id) ON DELETE CASCADE NOT NULL
);

CREATE TABLE IF NOT EXISTS Comments (
    id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
    parentThread BIGINT REFERENCES Threads(id) ON DELETE CASCADE NOT NULL,
    parentPost BIGINT REFERENCES Posts(id) ON DELETE CASCADE NOT NULL,
    parentComment BIGINT REFERENCES Comments(id) ON DELETE CASCADE,
    author TEXT REFERENCES Users(id) ON DELETE CASCADE,
    created timestamptz NOT NULL DEFAULT now(),
    content TEXT NOT NULL,
    /* Mark deleted rather than actually delete for moderation purposes. */
    isDeleted BOOLEAN DEFAULT false,
    isForcedAnonymous BOOLEAN DEFAULT false
);
CREATE INDEX Comments_parentThread on Comments(parentThread);
CREATE INDEX Comments_author on Comments(author);